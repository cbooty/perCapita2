

async function Send(sQuestion, storageCache) { //sends prompt to Anthropic and writes resopnse to chrome.local.storage for use in pop up later.  Looks to see if there has been a prompt 
                                                //defined in the Options OR if not, it uses its own default.

    console.log("###content.js > Send() > Startign Fundction");

    //load prompt from cache of synced storage

    updatePopUp("<br><center><h2>Article is being analyzed.</h2></center><img src ='/images/loading.gif'><h3>This could take a minute or two...</h3><h3>You can continue surfing and the magnifying glass will be shown as colored when the analysis if complete â†’ <img src='/icons/icon16.png'></h3><br><br>");

    console.log("**********************Query***********************");
    //console.log(prelimGPT + "\n\nHere is the news article:\n\n" + sQuestion);   ##################!!!!!!!!!!!

    var prelimGPT = storageCache.myChatGPTPrompt;
    
    //make sure that the prompt is valid and if not, direct users to setup page
    if ( prelimGPT == null || prelimGPT === 'undefined' || prelimGPT === '' ) {
        //updatePopUp("<p>It looks like the prompt isn't setup.</p><p>Right click Extension Icon (<img src='/icons/icon-bw-16.png'>), choose Options and follow the instructions.</p>><br><p>If you just installed this Extension, you should restart your browser</p>");
        
        var prelimGPT = "I want you to analyze the biggest dollar values from a news article that I will provide at the following prompt.\n\n";
        var prelimGPT = prelimGPT + "I want you to build an html table and include the following columns:\n";
        var prelimGPT = prelimGPT + "Add a column called [Description] that displays a [short description of the dollar value]\n";
        var prelimGPT = prelimGPT + "Add a column called [Amount] that displays [the dollar value].  This column should not include anything other than dollars.\n";
        var prelimGPT = prelimGPT + "Add a column called [Location] that displays [the location referenced in the article for this value, which should be either a country, state, province or city, if this location is listed.  If you are unsure of the city, use the province or state. If there is no location listed in the article for this value, use the location referenced for the overall article]\n";
        var prelimGPT = prelimGPT + "Add a column called [Population] that displays a [the population for this location.  Use your latest information for the population]\n";
        var prelimGPT = prelimGPT + "Add a column called [Amount per Resident] that is calculated as [Amount] diviced by [Population].  Round to nearest dollar if this is greater than $10.\n";
        var prelimGPT = prelimGPT + "Next, remove all rows where [Amount] = N/A, [Amount] is not in dollars or [Amount] = $0.\n";
        var prelimGPT = prelimGPT + "Ensure you format this table as HTML starting with an <Table> tag and only include the table in your response.\n";
        //return;
    }

    sQuestion  = sQuestion.substring(1, 7950); //make sure we don't exceed token count

    if (sQuestion == "") {  //most likely page didnt load a valid news story
        
        updatePopUp("<p>This does not appear to be a valid news article.</p>");
        return;
    }


 // <CLaude Code>
    const prompt = prelimGPT + sQuestion;

    console.log("###content.js > Send() >: \n" + prompt);

    try {
        //const response = await fetch('http://localhost:3000/ask-claude', {
        const response = await fetch('https://server-side-hidden-sound-4631.fly.dev/ask-claude', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ prompt }),
        });

        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }

        console.log("###content.js > Send() > Before Awaiting Response");

        const data = await response.json();

        console.log("###content.js > Send() > After Awaiting Response");
     

           //add warning text and title text to let users know not to blindly trust AI output
        titleTxt = "<table><tr><td><p><img src='/icons/icon48.png'></td><td><h3>Here are the per capital values from this article:</td></tr></table>"
        warningTxt = "<h4>This response is auto generated by Anthropic's AI and may contain factual or math errors.</h4><br>";

        htmlForPopUp = titleTxt +  data.response + warningTxt;  //determine the HTML for the PopUp page by appending a warning to the return result from OpenAI

        //UPDATE POP UP 
        updatePopUp(htmlForPopUp);

        //cahce this result for later if we're switching tabls
        chrome.storage.local.set({ [String(document.URL)]: htmlForPopUp, currentURL: String(document.URL)  }, function() {
                    chrome.storage.local.get([String(document.URL)], function(data) {
                        console.log('Value currently at ['+ String(document.URL)+ '] is:' + data[String(document.URL)]);
                       
                    });
            });
        
    } catch (error) {
        console.error('Claud Error 2:', error);
       
    }
    console.log("***************************************************");
}

function init(storageCache) {      //determine the raw text for only the news story part.  Do this by looking for valid sentences.
    rawText = document.body.innerText;
    newsStory = "";

    const lineArray = rawText.split("\n");  //split the text into lines and look for consecutive valid sentences

    for (var i = 0; i < lineArray.length; i++) {
        validSentenceCount = 0;
        mySentence = "";
        myPotentialParagraph = "";
        myConsecutiveWords = 0;
        myWordArray = lineArray[i].split(" ");
        
        for (var j = 0; j < myWordArray.length; j++) {
            var myWord = myWordArray[j]
            var lastChar = myWord.substr(myWord.length - 1);
            if (lastChar == ".") { //see if there's a period... if so, see if there are more than 4 consecutive words before it.   If so, assume it's a sentence.

                if (myConsecutiveWords > 4) {
                    myPotentialParagraph = myPotentialParagraph + mySentence
                    validSentenceCount = validSentenceCount + 1
                }

                mySentence = "";
                myConsecutiveWords = 0;

            } else {
                mySentence = mySentence + " "+ myWord
                myConsecutiveWords = myConsecutiveWords + 1;
            }
        }

        if (validSentenceCount > 0) {
            newsStory = newsStory + myPotentialParagraph + "\n"
        }
    }
    console.log("CT: Analyzing the News Story as follows:");
    console.log(newsStory);

    //UPDATE POP UP 
    updatePopUp("<p>News story read; sending to server...</p>"); 
   
    console.log("###content.js > init() > Before call to Send()");
    Send(newsStory, storageCache) //send the story to Anthropic for analysis     

    //sends a message to background.js worker to update popup window
    console.log("CT: OK before send message");

    (async () => {
        console.log("CT: Sending Message");
        const response = await chrome.runtime.sendMessage({chatGPTStatus: "In Progress", htmlForPopUp: "Processing Request", url: document.URL});
     
    })();
    console.log("CT: OK after send message");
}

//start by loading a cache of storage.sync and pass that to subsequent functions
var storageCache = {};
chrome.storage.sync.get(null, function(data) {
  storageCache = data;
  console.log("CT: OK before Init()");
});


function updatePopUp(newHTMLvalue) {  //try and send a message to the popup to update the HTML

    //popup_html_updated
    console.log("CT: Sending Message PopUp_HTML_Updated ["+newHTMLvalue+"]");
    chrome.runtime.sendMessage({
        msg: "popup_html_updated", 
        data: {
            subject: "popup_html_updated",
            content: newHTMLvalue
        }
    });
    console.log("CT: Send Message Popup_HTML_Updated Complete");
}

window.onload = function() {  //on loading of content, add listeners for variuos 
   console.log("CT: Adding listener for message");
    //https://stackoverflow.com/questions/4374793/accessing-current-tab-dom-object-from-a-chrome-extension
    //used to send HTML for current page to popup 
    chrome.runtime.onMessage.addListener( //setup listener to receive messages from popup window
      function(request, sender, sendResponse) {
        console.log("CT: on Message run");
        console.log("CT:  Request Action: " + request.action);
       
                   
        if (request.action == "getURL"){  //add action to get URL of active window
            console.log("CT: Sending respnose to getURL request");
            console.log("CT: " + document.URL);

            sendResponse({urlForActiveTab: document.URL});

        }else if (request.action == "analyzeStory") {  //add action to analyze story
            //UPDATE POP UP 
            updatePopUp("<p>Analzying news story...</p>");

            console.log("CT: OK before start initialization");
            init(storageCache);
            console.log("CT: OK before after initialization");
           

          }
    });  
    console.log("CT: OK after add listener");
    };

console.log("CT: Executed all scope");